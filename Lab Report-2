def is_valid_move(x, y, maze, visited):
    return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0 and (x, y) not in visited

def depth_limited_dfs(maze, current, target, depth, visited, path):
    if depth < 0:
        return False
    
    x, y = current
    visited.add((x, y))
    path.append((x, y))
    
    if current == target:
        return True
    
    # Define possible moves (right, down, left, up)
    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if is_valid_move(nx, ny, maze, visited):
            if depth_limited_dfs(maze, (nx, ny), target, depth - 1, visited, path):
                return True
    
    path.pop()
    visited.remove((x, y))
    return False

def iddfs(maze, start, target, max_depth=50):
    for depth in range(max_depth):
        visited = set()
        path = []
        if depth_limited_dfs(maze, start, target, depth, visited, path):
            print(f"Path found at depth {depth} using IDDFS")
            print("Traversal Order:", path)
            return
    print(f"Path not found at max depth {max_depth} using IDDFS")

# Example Test Cases
maze1 = [
    [0, 0, 1, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 0],
    [1, 1, 0, 1]
]
start1 = (0, 0)
target1 = (2, 3)

maze2 = [
    [0, 1, 0],
    [0, 1, 0],
    [0, 1, 0]
]
start2 = (0, 0)
target2 = (2, 2)

print("Case #1")
iddfs(maze1, start1, target1)
print("\nCase #2")
iddfs(maze2, start2, target2)